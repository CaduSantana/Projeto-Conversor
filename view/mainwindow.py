# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\resources\MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import PIL
from PIL.ImageQt import ImageQt
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import QPainter, QImage, QPen
from PyQt5.QtCore import QSize, QRect, QBuffer, QPoint
from PyQt5.QtWidgets import QMessageBox, QFileDialog, QSizePolicy, QAction, QWidget, QPushButton, QLabel, QFrame, QMenu, QMenuBar, QStatusBar
from PyQt5.Qt import qRed, qGreen, qBlue, qRgb
from PIL import Image
import numpy as np
import windowrgb, io


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.button1 = QtWidgets.QPushButton(self.centralwidget)
        self.button1.setGeometry(QtCore.QRect(360, 460, 75, 23))
        self.button1.setObjectName("button1")
        self.foto = QtWidgets.QLabel(self.centralwidget)
        self.foto.setGeometry(QtCore.QRect(10, 10, 381, 331))
        self.foto.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.foto.setText("")
        self.foto.setObjectName("foto")
        self.foto_2 = QtWidgets.QLabel(self.centralwidget)
        self.foto_2.setGeometry(QtCore.QRect(410, 10, 371, 331))
        self.foto_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.foto_2.setText("")
        self.foto_2.setObjectName("foto_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuArquivo = QtWidgets.QMenu(self.menubar)
        self.menuArquivo.setObjectName("menuArquivo")
        self.menuAjuda = QtWidgets.QMenu(self.menubar)
        self.menuAjuda.setObjectName("menuAjuda")
        self.menuOperacoes = QtWidgets.QMenu(self.menubar)
        self.menuOperacoes.setObjectName("menuOpera_es")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbrir = QtWidgets.QAction(MainWindow)
        self.actionAbrir.setObjectName("actionAbrir")
        self.actionSalvar = QtWidgets.QAction(MainWindow)
        self.actionSalvar.setObjectName("actionSalvar")
        self.actionSalvar_como = QtWidgets.QAction(MainWindow)
        self.actionSalvar_como.setObjectName("actionSalvar_como")
        self.actionSobre = QtWidgets.QAction(MainWindow)
        self.actionSobre.setObjectName("actionSobre")
        self.actionSeparador_RGB = QtWidgets.QAction(MainWindow)
        self.actionSeparador_RGB.setObjectName("actionSeparador_RGB")
        self.actionDesenhar = QtWidgets.QAction(MainWindow)
        self.actionDesenhar.setObjectName("actionDesenhar")
        self.menuArquivo.addAction(self.actionAbrir)
        self.menuArquivo.addAction(self.actionSalvar)
        self.menuArquivo.addAction(self.actionSalvar_como)
        self.menuAjuda.addAction(self.actionSobre)
        self.menuOperacoes.addAction(self.actionSeparador_RGB)
        self.menuOperacoes.addAction(self.actionDesenhar)
        self.menubar.addAction(self.menuArquivo.menuAction())
        self.menubar.addAction(self.menuOperacoes.menuAction())
        self.menubar.addAction(self.menuAjuda.menuAction())

        self.menubar.addAction(self.menuArquivo.menuAction())
        self.menubar.addAction(self.menuOperacoes.menuAction())
        self.menubar.addAction(self.menuAjuda.menuAction())
        self.menuArquivo.addAction(self.actionAbrir)
        self.menuArquivo.addAction(self.actionSalvar)
        self.menuArquivo.addAction(self.actionSalvar_como)
        self.menuAjuda.addAction(self.actionSobre)
        self.menuOperacoes.addAction(self.actionSeparador_RGB)
        self.menuOperacoes.addAction(self.actionDesenhar)

        self.actionAbrir.triggered.connect(self.abrir)
        self.actionSobre.triggered.connect(self.sobre)
        self.actionSeparador_RGB.triggered.connect(self.rgb)
        self.actionDesenhar.triggered.connect(self.desenhar)

        self.button1.clicked.connect(self.converterCorParaCinza)
        # self.button1.clicked.connect(self.inverterCor)
        # self.button1.clicked.connect(self.apenasVermelho)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.button1.setText(_translate("MainWindow", "PushButton"))
        self.menuArquivo.setTitle(_translate("MainWindow", "Arquivo"))
        self.menuAjuda.setTitle(_translate("MainWindow", "Ajuda"))
        self.menuOperacoes.setTitle(_translate("MainWindow", "Operações"))
        self.actionAbrir.setText(_translate("MainWindow", "Abrir"))
        self.actionSalvar.setText(_translate("MainWindow", "Salvar"))
        self.actionSalvar_como.setText(_translate("MainWindow", "Salvar como..."))
        self.actionSobre.setText(_translate("MainWindow", "Sobre"))
        self.actionSeparador_RGB.setText(_translate("MainWindow", "Separador RGB"))
        self.actionDesenhar.setText(_translate("MainWindow", "Desenhar"))

    def abrir(self):
        dlg = QFileDialog()  # cria um dialogo para selecionar o arquivo
        # seleciona qualquer tipo de arquivo
        dlg.setFileMode(QFileDialog.AnyFile)
        # dlg.setFilter("Imagens (*.png *.jpg *.jpeg)") # filtra os arquivos
        # filenames = list # cria uma lista para armazenar os nomes dos arquivos

        filename = dlg.getOpenFileName()  # abre o dialogo e armazena o nome do arquivo
        # coloca o conteudo do arquivo na textbox
        self.foto.setPixmap(QtGui.QPixmap(filename[0]))
        self.foto.setScaledContents(True)  # ajusta o tamanho da imagem

        pil_image = self.convert_qimage_to_pil(self.foto.pixmap().toImage())
        im = pil_image.convert('RGB')
        dados = im.tobytes("raw", "RGB")
        qim = QtGui.QImage(dados, im.size[0], im.size[1], QtGui.QImage.Format_RGB888)       

        self.foto.setPixmap(QtGui.QPixmap.fromImage(qim))

    #converts QImage to PIL Image
    def convert_qimage_to_pil(self, qimage):
        buffer = QBuffer()
        buffer.open(QBuffer.ReadWrite)
        qimage.save(buffer, "PNG")
        pil_image = PIL.Image.open(io.BytesIO(buffer.data()))
        # pil_image.show()

        return pil_image

    def converterCorParaCinza(self):
        # converts the image to grayscale bitwise using bits(). each pixel is a 3 by 1 vector. the first element is the red value, the second is the green value, and the third is the blue value. the value is between 0 and 255. the value of each element is multiplied by the corresponding weight. the sum of the three values is the final value for that pixel.
        # luminancia = (r + g + b) / 3

        image = self.foto.pixmap().toImage()
        # arrayptr = image.bits()
        for x in range(image.width()):
            for y in range(image.height()):
                pixel = image.pixel(x, y)
                r = qRed(pixel)
                g = qGreen(pixel)
                b = qBlue(pixel)
                # luminancia = (r + g + b) / 3
                luminancia = r*0.299 + g*0.587 + b*0.114
                image.setPixel(x, y, qRgb(round(luminancia), round(luminancia), round(luminancia))) # TODO É errado isto?
        self.foto_2.setPixmap(QtGui.QPixmap(image))
        self.foto_2.setScaledContents(True)

    def inverterCor(self):
        image = self.foto.pixmap().toImage()
        for x in range(image.width()):
            for y in range(image.height()):
                pixel = image.pixel(x, y)
                r = qRed(pixel)
                g = qGreen(pixel)
                b = qBlue(pixel)
                image.setPixel(x, y, qRgb(255-r, 255-g, 255-b))
        self.foto_2.setPixmap(QtGui.QPixmap(image))
        self.foto_2.setScaledContents(True)

    # def apenasVermelho(self):
    #     image = self.foto.pixmap().toImage()
    #     for x in range(image.width()):
    #         for y in range(image.height()):
    #             pixel = image.pixel(x, y)
    #             r = qRed(pixel)
    #             g = qGreen(pixel)
    #             b = qBlue(pixel)
    #             image.setPixel(x, y, qRgb(r, 0, 0))
    #     self.foto_2.setPixmap(QtGui.QPixmap(image))
    #     self.foto_2.setScaledContents(True)

    def rgb(self):
        self.Form = QtWidgets.QWidget()
        rgbWindow = windowrgb.Ui_Form()
        rgbWindow.setupUi(self.Form)

        imageR = self.foto.pixmap().toImage()
        for x in range(imageR.width()):
            for y in range(imageR.height()):
                pixel = imageR.pixel(x, y)
                r = qRed(pixel)
                g = qGreen(pixel)
                b = qBlue(pixel)
                imageR.setPixel(x, y, qRgb(r, 0, 0))
        rgbWindow.foto.setPixmap(QtGui.QPixmap(imageR))
        rgbWindow.foto.setScaledContents(True)
        
        imageG = self.foto.pixmap().toImage()
        for x in range(imageG.width()):
            for y in range(imageG.height()):
                pixel = imageG.pixel(x, y)
                r = qRed(pixel)
                g = qGreen(pixel)
                b = qBlue(pixel)
                imageG.setPixel(x, y, qRgb(0, g, 0))
        rgbWindow.foto_2.setPixmap(QtGui.QPixmap(imageG))
        rgbWindow.foto_2.setScaledContents(True)
        
        imageB = self.foto.pixmap().toImage()
        for x in range(imageB.width()):
            for y in range(imageB.height()):
                pixel = imageB.pixel(x, y)
                r = qRed(pixel)
                g = qGreen(pixel)
                b = qBlue(pixel)
                imageB.setPixel(x, y, qRgb(0, 0, b))
        rgbWindow.foto_3.setPixmap(QtGui.QPixmap(imageB))
        rgbWindow.foto_3.setScaledContents(True)
    
        self.Form.show()
    
    # draws a red pixel on the exact spot left clicked by user mouse, and updates the label
    def desenhar(self):
        image = self.foto.pixmap().toImage()
        
        # painter = QtGui.QPainter(image)
        # painter.drawLine(10, 10, 300, 200)
        # painter.end()
        # self.foto.setPixmap(QtGui.QPixmap(image))
        # self.foto.setScaledContents(True)
        # print("oi")

        self.drawing = False
        self.lastPoint = QtCore.QPoint()

        def paintEvent(self, event):
            if self.drawing:
                painter = QtGui.QPainter(self.image)
                painter.setPen(QtGui.QPen(QtCore.Qt.red, 10, QtCore.Qt.SolidLine, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin))
                painter.drawLine(self.lastPoint, event.pos())
                self.lastPoint = event.pos()
                self.update()
        
        def mousePressEvent(self, event):
            self.drawing = True
            self.lastPoint = event.pos()

        def mouseMoveEvent(self, event):
            self.update()

        def mouseReleaseEvent(self, event):
            self.drawing = False
            self.update()
        
                

        # x = event.x()
        # y = event.y()
        # self.foto.setPixmap(QtGui.QPixmap.fromImage(self.image))
        # canvas.setPixel(x, y, QtGui.QColor(255, 0, 0).rgb())
        # self.foto.setPixmap(QtGui.QPixmap.fromImage(self.canvas))
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.drawPixmap(self.rect(), self.image)

    def mousePressEvent(self, event):
        if event.button() == PyQt5.Qt.LeftButton:
            self.drawing = True
            self.lastPoint = event.pos()

    def mouseMoveEvent(self, event):
        if event.buttons() and Qt.LeftButton and self.drawing:
            painter = QPainter(self.image)
            painter.setPen(QPen(Qt.red, 3, Qt.SolidLine))
            painter.drawLine(self.lastPoint, event.pos())
            self.lastPoint = event.pos()
            self.update()

    def mouseReleaseEvent(self, event):
        if event.button == Qt.LeftButton:
            self.drawing = False


    def sobre(self):
        msg = QMessageBox()
        msg.setWindowTitle("Sobre")
        msg.setText("Projeto de conversão de imagens.")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        # msg.setDefaultButton(QMessageBox.Ok)
        msg.setInformativeText("Desenvolvido por Carlos Santana.")
        # msg.setDetailedText("Detailhes.")

        x = msg.exec_()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())   