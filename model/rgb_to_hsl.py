# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\resources\rgb_to_hsl.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import colorsys
import math
import os
from PyQt5 import QtCore, QtGui, QtWidgets, uic

class Ui_Dialog_RGB_to_HSL(object):
    def __init__(self):
        super(Ui_Dialog_RGB_to_HSL, self).__init__()
        uic.loadUi("."+os.path.sep+"resources"+os.path.sep+"rgb_to_hsl.ui", self)
        self.radioButton.toggled.connect(self.rgb2hsl)
        self.radioButton_2.toggled.connect(self.hsl2rgb)
        self.pushButton.clicked.connect(self.conversor)

    def setupUi(self, Dialog_RGB_to_HSL):
        Dialog_RGB_to_HSL.setObjectName("Dialog_RGB_to_HSL")
        Dialog_RGB_to_HSL.resize(202, 128)
        self.label = QtWidgets.QLabel(Dialog_RGB_to_HSL)
        self.label.setGeometry(QtCore.QRect(20, 20, 21, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog_RGB_to_HSL)
        self.label_2.setGeometry(QtCore.QRect(20, 40, 16, 20))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog_RGB_to_HSL)
        self.label_3.setGeometry(QtCore.QRect(20, 60, 16, 20))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(Dialog_RGB_to_HSL)
        self.lineEdit.setGeometry(QtCore.QRect(40, 20, 31, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog_RGB_to_HSL)
        self.lineEdit_2.setGeometry(QtCore.QRect(40, 40, 31, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(Dialog_RGB_to_HSL)
        self.lineEdit_3.setGeometry(QtCore.QRect(40, 60, 31, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(Dialog_RGB_to_HSL)
        self.label_4.setGeometry(QtCore.QRect(130, 40, 16, 20))
        self.label_4.setObjectName("label_4")
        self.lineEdit_4 = QtWidgets.QLineEdit(Dialog_RGB_to_HSL)
        self.lineEdit_4.setEnabled(False)
        self.lineEdit_4.setGeometry(QtCore.QRect(150, 40, 31, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_5 = QtWidgets.QLabel(Dialog_RGB_to_HSL)
        self.label_5.setGeometry(QtCore.QRect(130, 60, 16, 20))
        self.label_5.setObjectName("label_5")
        self.lineEdit_5 = QtWidgets.QLineEdit(Dialog_RGB_to_HSL)
        self.lineEdit_5.setEnabled(False)
        self.lineEdit_5.setGeometry(QtCore.QRect(150, 20, 31, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_6 = QtWidgets.QLabel(Dialog_RGB_to_HSL)
        self.label_6.setEnabled(True)
        self.label_6.setGeometry(QtCore.QRect(130, 20, 21, 20))
        self.label_6.setObjectName("label_6")
        self.lineEdit_6 = QtWidgets.QLineEdit(Dialog_RGB_to_HSL)
        self.lineEdit_6.setEnabled(False)
        self.lineEdit_6.setGeometry(QtCore.QRect(150, 60, 31, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton = QtWidgets.QPushButton(Dialog_RGB_to_HSL)
        self.pushButton.setGeometry(QtCore.QRect(60, 90, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.groupBox = QtWidgets.QGroupBox(Dialog_RGB_to_HSL)
        self.groupBox.setGeometry(QtCore.QRect(80, 20, 41, 51))
        self.groupBox.setTitle("")
        self.groupBox.setFlat(False)
        self.groupBox.setObjectName("groupBox")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setGeometry(QtCore.QRect(0, 10, 82, 17))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.setChecked(True)
        self.mode = 0
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_2.setGeometry(QtCore.QRect(0, 30, 82, 17))
        self.radioButton_2.setObjectName("radioButton_2")
        


        self.retranslateUi(Dialog_RGB_to_HSL)

        QtCore.QMetaObject.connectSlotsByName(Dialog_RGB_to_HSL)

    def retranslateUi(self, Dialog_RGB_to_HSL):
        _translate = QtCore.QCoreApplication.translate
        Dialog_RGB_to_HSL.setWindowTitle(_translate("Dialog_RGB_to_HSL", "Dialog"))
        self.label.setText(_translate("Dialog_RGB_to_HSL", "R:"))
        self.label_2.setText(_translate("Dialog_RGB_to_HSL", "G:"))
        self.label_3.setText(_translate("Dialog_RGB_to_HSL", "B:"))
        self.label_4.setText(_translate("Dialog_RGB_to_HSL", "S:"))
        self.label_5.setText(_translate("Dialog_RGB_to_HSL", "V:"))
        self.label_6.setText(_translate("Dialog_RGB_to_HSL", "H:"))
        self.pushButton.setText(_translate("Dialog_RGB_to_HSL", "Converter"))
        self.radioButton.setText(_translate("Dialog_RGB_to_HSL", "→"))
        self.radioButton_2.setText(_translate("Dialog_RGB_to_HSL", "←"))

    def convert_RGB_to_HSV(self, r, g, b):
        r, g, b = r/255.0, g/255.0, b/255.0 # Divida tudo por 255
        mx = max(r, g, b) # Encontre os máximos e os mínimos das cores
        mn = min(r, g, b)
        luminance = (mx + mn) / 2.0
        if mx == mn:
            hue = 0
            saturation = 0
        if luminance <= 0.5:
            saturation = (mx - mn) / (mx + mn)
        else:
            saturation = (mx - mn) / (2.0 - mx - mn)
        if mx == r:
            hue = (g - b) / (mx - mn)
        elif mx == g:
            hue = 2.0 + (b - r) / (mx - mn)
        else:
            hue = 4.0 + (r - g) / (mx - mn)
        hue *= 60.0
        if hue < 0:
            hue += 360
        return((math.floor(hue *  (2 / 3)), math.floor(saturation*240), math.floor(luminance * 240)))
    
    def convert_HSL_to_RGB(self, h, s, l):
        f1 = self.numLen(h) 
        f2 = self.numLen(s) 
        f3 = self.numLen(l) 
        if( (f1>=1 and f1<=3) and (f2>=1 and f2<=3) and (f3>=1 and f3<=3) ):
            r, g, b = self.hue2rgb(h, s, l)
            return (r, g, b)

    def hue2rgb(self, h, s, l):
        s/=240
        l/=240

        c = (1-abs(2*l-1)) * s
        x = c * (1 - abs((h/40) % 2-1))

        m = l - c/2
        r = 0
        g = 0
        b = 0
        
        if(h<=0 and h<40):
            r = c
            g = x
            b = 0

        elif (h<=40 and h<80):
            r = x
            g = c
            b = 0
        
        elif(h<=80 and h<120):
            r = 0
            g = c
            b = x
        
        elif(h<=120 and h<160):
            r = 0
            g = x
            b = c
        
        elif(h<=160 and h<200):
            r = x
            g = 0
            b = c
        
        elif(h<=200 and h<240):
            r = c
            g = 0
            b = x

        r = round((r+m)*255)
        g = round((g+m)*255)
        b = round((b+m)*255)

        return (b, g, r)

    def conversor(self):
        if self.mode == 0:
            r = float(self.lineEdit.text())
            g = float(self.lineEdit_2.text())
            b = float(self.lineEdit_3.text())
            print(r, g, b)
            h, s, l = self.convert_RGB_to_HSV(r/100, g/100, b/100)
            print(h, s, l)
            self.lineEdit_4.setText(str(s))
            self.lineEdit_5.setText(str(h))
            self.lineEdit_6.setText(str(l))
        else:
            h = float(self.lineEdit_4.text())
            s = float(self.lineEdit_5.text())
            l = float(self.lineEdit_6.text())
            print(h, s, l)
            r, g, b = self.convert_HSL_to_RGB(s, h, l)
            print(r, g, b)
            self.lineEdit.setText(str(r))
            self.lineEdit_2.setText(str(g))
            self.lineEdit_3.setText(str(b))

    def rgb2hsl(self):
        self.lineEdit.setEnabled(True)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_3.setEnabled(True)
        self.lineEdit_4.setEnabled(False)
        self.lineEdit_5.setEnabled(False)
        self.lineEdit_6.setEnabled(False)
        self.lineEdit_4.setText("")
        self.lineEdit_5.setText("")
        self.lineEdit_6.setText("")
        self.mode = 0

    def hsl2rgb(self):
        self.lineEdit.setEnabled(False)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_3.setEnabled(False)
        self.lineEdit_4.setEnabled(True)
        self.lineEdit_5.setEnabled(True)
        self.lineEdit_6.setEnabled(True)
        self.lineEdit.setText("")
        self.lineEdit_2.setText("")
        self.lineEdit_3.setText("")
        self.lineEdit_4.setText("")
        self.lineEdit_5.setText("")
        self.lineEdit_6.setText("")
        self.mode = 1

    def numLen(self, num):
        num = abs(int(num))
        if num < 2:
            return 1
        count = 0
        value = 1
        while value <= num:
            value *= 10
            count += 1
        return count

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog_RGB_to_HSL = QtWidgets.QDialog()
    ui = Ui_Dialog_RGB_to_HSL()
    ui.setupUi(Dialog_RGB_to_HSL)
    Dialog_RGB_to_HSL.show()
    sys.exit(app.exec_())
